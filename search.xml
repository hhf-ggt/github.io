<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css</title>
    <url>/posts/78cea6d8/</url>
    <content><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>移动端h5、1px问题、导致边框变粗、设计稿为1px、但是效果图看起来是比1px粗的问题</p>
<h2 id="2、概念了解"><a href="#2、概念了解" class="headerlink" title="2、概念了解"></a>2、概念了解</h2><h3 id="2-1-物理像素"><a href="#2-1-物理像素" class="headerlink" title="2.1 物理像素"></a>2.1 物理像素</h3><blockquote>
<p>物理像素又称设备像素、是组成显示屏的基本单位，每一台设备的物理像素在出厂时就已经固定好了，不会改变，我们平时看到的图片是通过每个像素不同颜色组合而成的。设计师一般都是使用物理像素作为单位的</p>
</blockquote>
<h3 id="2-2-逻辑像素"><a href="#2-2-逻辑像素" class="headerlink" title="2.2 逻辑像素"></a>2.2 逻辑像素</h3><blockquote>
<p>逻辑像素又称为设备独立像素或CSS像素，是组成图像的基本单位，它是一个抽象概念，我们可以笼统的认为屏幕可视区域的宽度就是逻辑像素的大小。在1倍屏下，1倍逻辑像素=1倍物理像素；2倍屏下，1倍逻辑像素=2倍物理像素。逻辑像素是可变的，例如当我们放大页面的尺寸比例时，逻辑像素也就随之扩大。</p>
</blockquote>
<p><em><strong>前端开发者在CSS中设置的像素就是逻辑像素。</strong></em></p>
<h3 id="2-3-设备像素比"><a href="#2-3-设备像素比" class="headerlink" title="2.3 设备像素比"></a>2.3 设备像素比</h3><blockquote>
<p>设备像素比描述的是物理像素和逻辑像素之间的比例关系。可以通过window.devicePixelRatio来获取得到</p>
</blockquote>
<h3 id="2-4-PPI"><a href="#2-4-PPI" class="headerlink" title="2.4 PPI"></a>2.4 PPI</h3><blockquote>
<p>指的是设备每英寸的物理像素点，说的简单点就是一英寸的屏幕中由多少个物理像素组合而成。</p>
</blockquote>
<p>我们买手机的时候规格上会写上：</p>
<pre class=" language-text"><code class="language-text">尺寸：5.5英寸
分辨率：1920 * 1080 像素
</code></pre>
<blockquote>
<p>这里的1920 * 1080指的是物理像素，就是可视区域内总物理像素的数量，1920代表是长边所占像素大小，1080表示短边所占像素大小。</p>
</blockquote>
<h2 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h2><h3 id="3-1-媒体查询的方式"><a href="#3-1-媒体查询的方式" class="headerlink" title="3.1 媒体查询的方式"></a>3.1 媒体查询的方式</h3><pre class=" language-text"><code class="language-text">.div &#123;
  border-width: 1px;
&#125;

/* 两倍像素下 */
@media screen and (-webkit-min-device-pixel-ratio: 2) &#123;
  .div &#123;
    border-width: 0.5px;
  &#125;
&#125;
/* 三倍像素下 */
@media screen and (-webkit-min-device-pixel-ratio: 3) &#123;
  .div &#123;
    border-width: 0.333333px;
  &#125;
&#125;
</code></pre>
<ul>
<li>缺点<ul>
<li>代码量多</li>
<li>低版本ie不支持</li>
</ul>
</li>
</ul>
<h3 id="3-2-transform"><a href="#3-2-transform" class="headerlink" title="3.2 transform"></a>3.2 transform</h3><pre class=" language-text"><code class="language-text">@border-color-base : #EBEDF0;
// 伪元素的位置控制
.scale-hairline-common(@color, @top, @right, @bottom, @left) &#123;
  content: '';
  position: absolute;
  background-color: @color;
  display: block;
  z-index: 1;
  top: @top;
  right: @right;
  bottom: @bottom;
  left: @left;
&#125;

//上边框
.hairline(@direction, @color: @border-color-base) when (@direction = 'top') &#123;
  border-top: 1PX solid @color;

    @media (min-resolution: 2dppx) &#123;
      border-top: none;

      &::before &#123;
        .scale-hairline-common(@color, 0, auto, auto, 0);
        width: 100%;
        height: 1PX;
        transform-origin: 50% 50%;
        transform: scaleY(0.5);

        @media (min-resolution: 3dppx) &#123;
          transform: scaleY(0.33);
        &#125;
      &#125;
    &#125;
&#125;

// 右边框
.hairline(@direction, @color: @border-color-base) when (@direction = 'right') &#123;
  border-right: 1PX solid @color;

    @media (min-resolution: 2dppx) &#123;
      border-right: none;

      &::after &#123;
        .scale-hairline-common(@color, 0, 0, auto, auto);
        width: 1PX;
        height: 100%;
        background: @color;
        transform-origin: 100% 50%;
        transform: scaleX(0.5);

        @media (min-resolution: 3dppx) &#123;
          transform: scaleX(0.33);
        &#125;
      &#125;
    &#125;
&#125;

// 下边框
.hairline(@direction, @color: @border-color-base) when (@direction = 'bottom') &#123;
  border-bottom: 1PX solid @color;

    @media (min-resolution: 2dppx) &#123;
      border-bottom: none;
      &::after &#123;
        .scale-hairline-common(@color, auto, auto, 0, 0);
        width: 100%;
        height: 1PX;
        transform-origin: 50% 100%;
        transform: scaleY(0.5);
        @media (min-resolution: 3dppx) &#123;
          transform: scaleY(0.33);
        &#125;
      &#125;
    &#125;
&#125;

// 左边框
.hairline(@direction, @color: @border-color-base) when (@direction = 'left') &#123;
  border-left: 1PX solid @color;

    @media (min-resolution: 2dppx) &#123;
      border-left: none;

      &::before &#123;
        .scale-hairline-common(@color, 0, auto, auto, 0);
        width: 1PX;
        height: 100%;
        transform-origin: 100% 50%;
        transform: scaleX(0.5);

        @media (min-resolution: 3dppx) &#123;
          transform: scaleX(0.33);
        &#125;
      &#125;
    &#125;
&#125;

// 全边框
.hairline(@direction, @color: @border-color-base, @radius: 0) when (@direction = 'all') &#123;
  border: 1PX solid @color;
  border-radius: @radius;

    @media (min-resolution: 2dppx) &#123;
      position: relative;
      border: none;

      &::before &#123;
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: 200%;
        height: 200%;
        border: 1PX solid @color;
        border-radius: @radius * 2;
        transform-origin: 0 0;
        transform: scale(0.5);
        box-sizing: border-box;
        pointer-events: none;
      &#125;
    &#125;
&#125;
</code></pre>
<p><em><strong>使用</strong></em></p>
<pre class=" language-text"><code class="language-text">.div1&#123;
  .hairline('top',#eeeeee)
  .hairline('right')
  .hairline('left',#cccccc)
&#125;
.div2&#123;
  .hairline('all',#bbbbbb,3px)
&#125;
</code></pre>
<ul>
<li>缺点<ul>
<li>对于已经使用的伪类(如：clearfix)，可能需要多层嵌套</li>
</ul>
</li>
</ul>
<h3 id="3-3-box-shadow模拟边框"><a href="#3-3-box-shadow模拟边框" class="headerlink" title="3.3 box-shadow模拟边框"></a>3.3 box-shadow模拟边框</h3><pre class=" language-text"><code class="language-text">.div &#123;
  box-shadow: inset 0px -1px 1px -1px #c8c7cc;
&#125;
</code></pre>
<ul>
<li>缺点<ul>
<li>会有颜色渐变</li>
</ul>
</li>
</ul>
<h3 id="3-4-border-image的方式"><a href="#3-4-border-image的方式" class="headerlink" title="3.4 border-image的方式"></a>3.4 border-image的方式</h3><pre class=" language-text"><code class="language-text">.background-image-1px &#123;
  background: url(...) no-repeat left bottom;
  -webkit-background-size: 100% 1px;
  background-size: 100% 1px;
&#125;

.border-bottom-1px &#123;
  border-width: 0 0 1px 0;
  -webkit-border-image: url(...) 0 0 2 0 stretch;
  border-image: url(...) 0 0 2 0 stretch;
&#125;
</code></pre>
<ul>
<li>缺点<ul>
<li>我想换个颜色还得换图,而且图片处理圆角会出现模糊的问题</li>
</ul>
</li>
</ul>
<h2 id="4、Q-amp-A"><a href="#4、Q-amp-A" class="headerlink" title="4、Q&amp;A"></a>4、Q&amp;A</h2><ul>
<li><p>Q: 上面的解释是真的对吗？</p>
</li>
<li><p>A: 如果上面解释的是正确的、那么为什么1px会有问题、其他的不会有问题、比如10px、100px呢？</p>
</li>
<li><p>Q: 所以真正的原因是什么呢</p>
</li>
<li><p>A:</p>
<pre class=" language-text"><code class="language-text">我们做移动端页面时一般都会设置meta viewport的content=“width=device-width”，
这里就是把html视窗宽度大小设置等于设备宽度的大小，大多数手机的屏幕设备宽度都差不多，
以iphoneX为例，屏幕宽度375px。
而UI给设计图的时候基本上都是给的二倍图甚至三倍图，假设设计图是750px的二倍图，
在750px上设计了1px的边框，要拿到375px宽度的手机来显示，就相当于整体设计图缩小一倍，
所以在375px手机上要以0.5px呈现才符合预期效果，然而css里最低只支持1px大小，不足1px就以1px显示，
所以你看到的就显得边框较粗，实际上只是设计图整体缩小了，而1px的边框没有跟着缩小导致的。
（ps：ios较新版已支持0.5px，安卓不支持，这里暂且忽略）
</code></pre>
</li>
</ul>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><blockquote>
<p>根本原因就是我们开发和设计所使用的单位是不一致的、设计在二倍屏的情况下设计1px的线或者边框、我们在自己设备上开发的时候并不能支持设计需要的1px效果、所以我们需要支持兼容</p>
</blockquote>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo &amp; github 搭建blog</title>
    <url>/posts/8e280e62/</url>
    <content><![CDATA[<h1 id="1、安装hexo"><a href="#1、安装hexo" class="headerlink" title="1、安装hexo"></a>1、安装<code>hexo</code></h1><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g
$ hexo init blog
$ <span class="token function">cd</span> blog
$ <span class="token function">npm</span> <span class="token function">install</span>
$ hexo server
</code></pre>
<p><a href="https://hexo.io/zh-cn/">hexo官网</a></p>
<h1 id="2、配置github"><a href="#2、配置github" class="headerlink" title="2、配置github"></a>2、配置github</h1><ul>
<li>2.1 新建仓库起名为 githubNmae.github.io</li>
<li>2.2 在设置中找到page、支持访问master分支</li>
</ul>
<h1 id="3、安装主题"><a href="#3、安装主题" class="headerlink" title="3、安装主题"></a>3、安装主题</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cd到blog目录</span>
$ <span class="token function">git</span> clone https://github.com/iissnan/hexo-theme-next themes/next

<span class="token comment" spellcheck="true"># 手动安装 hexo-renderer-swig 否则localhost:4000 打开无法渲染页面</span>
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-swig

<span class="token comment" spellcheck="true"># 切换next风格 在主题配置文件中找到theme</span>

$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb
<span class="token comment" spellcheck="true"># 安装本地搜索插件</span>

$ <span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount --save
<span class="token comment" spellcheck="true"># 安装文章字数统计及阅读时的功能</span>

$ <span class="token function">npm</span> uninstall hexo-generator-index --save
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save
<span class="token comment" spellcheck="true"># 安装文件制顶功能</span>

<span class="token comment" spellcheck="true"># 链接文章</span>
$ <span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save
</code></pre>
<h1 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h1><blockquote>
<p>阿里云购买域名、绑定自己github仓库</p>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><blockquote>
<p>在source目录下创建CNAME文件将域名写进去、防止每次提交代码后域名绑定丢失、页面跳转404</p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>npm</title>
    <url>/posts/1661a9ac/</url>
    <content><![CDATA[<p><a href="https://docs.npmjs.com/about-npm">npm官网</a></p>
<h3 id="一、npm命令"><a href="#一、npm命令" class="headerlink" title="一、npm命令"></a>一、<code>npm</code>命令</h3><pre class=" language-bash"><code class="language-bash">$ npn <span class="token function">install</span> -g <span class="token function">npm</span>
<span class="token comment" spellcheck="true"># 安装npm 全局安装 -g 全局安装</span>

$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npmmirror.com
<span class="token comment" spellcheck="true"># 设置淘宝镜像、也可以使用nrm来管理</span>

$ cnpm <span class="token function">install</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span>

$ <span class="token function">npm</span> <span class="token function">install</span> express <span class="token operator">||</span> xxx
<span class="token comment" spellcheck="true"># 安装某一个包</span>

$ <span class="token function">npm</span> <span class="token function">install</span> express --save-dev <span class="token operator">||</span> <span class="token function">npm</span> <span class="token function">install</span> express -D
<span class="token comment" spellcheck="true"># 安装在devDependencies</span>

$ <span class="token function">npm</span> <span class="token function">install</span> express --save <span class="token operator">||</span> <span class="token function">npm</span> <span class="token function">install</span> express -S
<span class="token comment" spellcheck="true"># 安装在dependencies</span>

$ <span class="token function">npm</span> <span class="token function">install</span> express
<span class="token comment" spellcheck="true"># 安装在dependencies</span>

$ <span class="token function">npm</span> uninstall express
<span class="token comment" spellcheck="true"># 卸载包express</span>

$ <span class="token function">npm</span> -v
<span class="token comment" spellcheck="true"># 查看npm 版本</span>

$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">||</span> <span class="token function">npm</span> i
<span class="token comment" spellcheck="true"># 安装依赖</span>

$ <span class="token function">npm</span> init --yes
<span class="token comment" spellcheck="true"># 创建package.json文件、跳过提问</span>

$ <span class="token function">npm</span> i
<span class="token comment" spellcheck="true"># 生成包管理文件package.json、有问答环节</span>

$ <span class="token function">npm</span> view @xxx
<span class="token comment" spellcheck="true"># 查看某一个包的最新版本</span>

$ <span class="token function">npm</span> list -g
<span class="token comment" spellcheck="true"># 查看全局安装的</span>

$ <span class="token function">npm</span> <span class="token function">ls</span>
<span class="token comment" spellcheck="true"># 卸载后，你可以到 /node_modules/ 目录下查看包是否还存在</span>

$ <span class="token function">npm</span> update express
<span class="token comment" spellcheck="true"># 更新模块</span>

$ <span class="token function">npm</span> search express
<span class="token comment" spellcheck="true"># 搜索模块</span>

$ <span class="token function">npm</span> publish
<span class="token comment" spellcheck="true"># 发布模块</span>

$ <span class="token function">npm</span> <span class="token function">help</span>
<span class="token comment" spellcheck="true"># 查看命令</span>

$ <span class="token function">npm</span> cache <span class="token function">clear</span>
<span class="token comment" spellcheck="true"># 清空本地缓存</span>

$ <span class="token function">npm</span> update xxx
<span class="token comment" spellcheck="true"># 更新最新版本</span>
</code></pre>
<h3 id="二、本地安装"><a href="#二、本地安装" class="headerlink" title="二、本地安装"></a>二、本地安装</h3><blockquote>
<p>安装在项目根目录下的node_modules中</p>
</blockquote>
<h3 id="三、全局安装"><a href="#三、全局安装" class="headerlink" title="三、全局安装"></a>三、全局安装</h3><blockquote>
<p>安装在/usr/local或者你的node的安装目录下</p>
</blockquote>
<h3 id="四、npm版本号管理"><a href="#四、npm版本号管理" class="headerlink" title="四、npm版本号管理"></a>四、<code>npm</code>版本号管理</h3><blockquote>
<p>语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p>
</blockquote>
<ul>
<li>如果只是修复bug，需要更新Z位。</li>
<li>如果是新增了功能，但是向下兼容，需要更新Y位。</li>
<li>如果有大变动，向下不兼容，需要更新X位。</li>
</ul>
<ol>
<li>~会匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0</li>
<li>^会匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0</li>
<li>什么都没有就是固定版本号</li>
</ol>
<h3 id="五、yarn"><a href="#五、yarn" class="headerlink" title="五、yarn"></a>五、<code>yarn</code></h3><blockquote>
<p>yarn和npm 同样的作用、但是yarn比npm安装快速、因为yarn是并行安装并且内部不是层级关系</p>
</blockquote>
<h3 id="六、pnpm"><a href="#六、pnpm" class="headerlink" title="六、pnpm"></a>六、<code>pnpm</code></h3><blockquote>
<p>pnpm是可以将我们本地所有项目中公用的包给提取出去、同样的包如果版本相同的情况下只需要安装一次即可</p>
</blockquote>
<h3 id="七、问题记录"><a href="#七、问题记录" class="headerlink" title="七、问题记录"></a>七、问题记录</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><pre class=" language-text"><code class="language-text">  npm ERR! code EINTEGRITY
  npm ERR! sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA== integrity checksum failed when using sha512: wanted sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA== but got sha512-WXI95kpJrxw4Nnx8vVI90PuUhrQjnNgghBl5tn54rUNKZYbxv+4ACxUzPVpJEtWxKmeDwnQrzjc0C2bYmRJVKg==. (65117 bytes)
</code></pre>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><pre class=" language-bash"><code class="language-bash">$ delete package.lock.json
$ <span class="token function">npm</span> <span class="token function">install</span> --legacy-peer-deps
<span class="token comment" spellcheck="true"># 解决 --legacy-peer-deps标志是在v7中引入的，目的是绕过peerDependency自动安装；它告诉 NPM 忽略项目中引入的各个modules之间的相同modules但不同版本的问题并继续安装，保证各个引入的依赖之间对自身所使用的不同版本modules共存。</span>
</code></pre>
]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
